package com.timesheetsystem.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class UserPreferenceAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUserPreferenceAllPropertiesEquals(UserPreference expected, UserPreference actual) {
        assertUserPreferenceAutoGeneratedPropertiesEquals(expected, actual);
        assertUserPreferenceAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUserPreferenceAllUpdatablePropertiesEquals(UserPreference expected, UserPreference actual) {
        assertUserPreferenceUpdatableFieldsEquals(expected, actual);
        assertUserPreferenceUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUserPreferenceAutoGeneratedPropertiesEquals(UserPreference expected, UserPreference actual) {
        assertThat(expected)
            .as("Verify UserPreference auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUserPreferenceUpdatableFieldsEquals(UserPreference expected, UserPreference actual) {
        assertThat(expected)
            .as("Verify UserPreference relevant properties")
            .satisfies(e -> assertThat(e.getDefaultCompanyId()).as("check defaultCompanyId").isEqualTo(actual.getDefaultCompanyId()))
            .satisfies(e -> assertThat(e.getEmailNotifications()).as("check emailNotifications").isEqualTo(actual.getEmailNotifications()))
            .satisfies(e -> assertThat(e.getSmsNotifications()).as("check smsNotifications").isEqualTo(actual.getSmsNotifications()))
            .satisfies(e -> assertThat(e.getPushNotifications()).as("check pushNotifications").isEqualTo(actual.getPushNotifications()))
            .satisfies(e -> assertThat(e.getReportFrequency()).as("check reportFrequency").isEqualTo(actual.getReportFrequency()))
            .satisfies(e -> assertThat(e.getWeekStartDay()).as("check weekStartDay").isEqualTo(actual.getWeekStartDay()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUserPreferenceUpdatableRelationshipsEquals(UserPreference expected, UserPreference actual) {}
}
