package com.timesheetsystem.domain;

import static com.timesheetsystem.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

public class TimesheetReportAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTimesheetReportAllPropertiesEquals(TimesheetReport expected, TimesheetReport actual) {
        assertTimesheetReportAutoGeneratedPropertiesEquals(expected, actual);
        assertTimesheetReportAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTimesheetReportAllUpdatablePropertiesEquals(TimesheetReport expected, TimesheetReport actual) {
        assertTimesheetReportUpdatableFieldsEquals(expected, actual);
        assertTimesheetReportUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTimesheetReportAutoGeneratedPropertiesEquals(TimesheetReport expected, TimesheetReport actual) {
        assertThat(expected)
            .as("Verify TimesheetReport auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTimesheetReportUpdatableFieldsEquals(TimesheetReport expected, TimesheetReport actual) {
        assertThat(expected)
            .as("Verify TimesheetReport relevant properties")
            .satisfies(e -> assertThat(e.getUserId()).as("check userId").isEqualTo(actual.getUserId()))
            .satisfies(e -> assertThat(e.getUserName()).as("check userName").isEqualTo(actual.getUserName()))
            .satisfies(e -> assertThat(e.getCompanyId()).as("check companyId").isEqualTo(actual.getCompanyId()))
            .satisfies(e -> assertThat(e.getCompanyName()).as("check companyName").isEqualTo(actual.getCompanyName()))
            .satisfies(e -> assertThat(e.getStartDate()).as("check startDate").isEqualTo(actual.getStartDate()))
            .satisfies(e -> assertThat(e.getEndDate()).as("check endDate").isEqualTo(actual.getEndDate()))
            .satisfies(e -> assertThat(e.getTotalRegularHours()).as("check totalRegularHours").isEqualTo(actual.getTotalRegularHours()))
            .satisfies(e -> assertThat(e.getTotalOvertimeHours()).as("check totalOvertimeHours").isEqualTo(actual.getTotalOvertimeHours()))
            .satisfies(e -> assertThat(e.getTotalAllowance()).as("check totalAllowance").isEqualTo(actual.getTotalAllowance()))
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()))
            .satisfies(
                e ->
                    assertThat(e.getGeneratedAt())
                        .as("check generatedAt")
                        .usingComparator(zonedDataTimeSameInstant)
                        .isEqualTo(actual.getGeneratedAt())
            )
            .satisfies(
                e ->
                    assertThat(e.getApprovedAt())
                        .as("check approvedAt")
                        .usingComparator(zonedDataTimeSameInstant)
                        .isEqualTo(actual.getApprovedAt())
            )
            .satisfies(e -> assertThat(e.getComments()).as("check comments").isEqualTo(actual.getComments()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTimesheetReportUpdatableRelationshipsEquals(TimesheetReport expected, TimesheetReport actual) {}
}
