package com.timesheetsystem.domain;

import static com.timesheetsystem.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

public class TimesheetAuditAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTimesheetAuditAllPropertiesEquals(TimesheetAudit expected, TimesheetAudit actual) {
        assertTimesheetAuditAutoGeneratedPropertiesEquals(expected, actual);
        assertTimesheetAuditAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTimesheetAuditAllUpdatablePropertiesEquals(TimesheetAudit expected, TimesheetAudit actual) {
        assertTimesheetAuditUpdatableFieldsEquals(expected, actual);
        assertTimesheetAuditUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTimesheetAuditAutoGeneratedPropertiesEquals(TimesheetAudit expected, TimesheetAudit actual) {
        assertThat(expected)
            .as("Verify TimesheetAudit auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTimesheetAuditUpdatableFieldsEquals(TimesheetAudit expected, TimesheetAudit actual) {
        assertThat(expected)
            .as("Verify TimesheetAudit relevant properties")
            .satisfies(e -> assertThat(e.getEntityType()).as("check entityType").isEqualTo(actual.getEntityType()))
            .satisfies(e -> assertThat(e.getEntityId()).as("check entityId").isEqualTo(actual.getEntityId()))
            .satisfies(e -> assertThat(e.getAction()).as("check action").isEqualTo(actual.getAction()))
            .satisfies(
                e ->
                    assertThat(e.getTimestamp())
                        .as("check timestamp")
                        .usingComparator(zonedDataTimeSameInstant)
                        .isEqualTo(actual.getTimestamp())
            )
            .satisfies(e -> assertThat(e.getUserId()).as("check userId").isEqualTo(actual.getUserId()))
            .satisfies(e -> assertThat(e.getOldValues()).as("check oldValues").isEqualTo(actual.getOldValues()))
            .satisfies(e -> assertThat(e.getNewValues()).as("check newValues").isEqualTo(actual.getNewValues()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTimesheetAuditUpdatableRelationshipsEquals(TimesheetAudit expected, TimesheetAudit actual) {}
}
