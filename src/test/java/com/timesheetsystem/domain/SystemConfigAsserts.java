package com.timesheetsystem.domain;

import static com.timesheetsystem.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

public class SystemConfigAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSystemConfigAllPropertiesEquals(SystemConfig expected, SystemConfig actual) {
        assertSystemConfigAutoGeneratedPropertiesEquals(expected, actual);
        assertSystemConfigAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSystemConfigAllUpdatablePropertiesEquals(SystemConfig expected, SystemConfig actual) {
        assertSystemConfigUpdatableFieldsEquals(expected, actual);
        assertSystemConfigUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSystemConfigAutoGeneratedPropertiesEquals(SystemConfig expected, SystemConfig actual) {
        assertThat(expected)
            .as("Verify SystemConfig auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSystemConfigUpdatableFieldsEquals(SystemConfig expected, SystemConfig actual) {
        assertThat(expected)
            .as("Verify SystemConfig relevant properties")
            .satisfies(e -> assertThat(e.getDailyWorkHours()).as("check dailyWorkHours").isEqualTo(actual.getDailyWorkHours()))
            .satisfies(e -> assertThat(e.getWeeklyWorkHours()).as("check weeklyWorkHours").isEqualTo(actual.getWeeklyWorkHours()))
            .satisfies(e -> assertThat(e.getOvertimeNormalRate()).as("check overtimeNormalRate").isEqualTo(actual.getOvertimeNormalRate()))
            .satisfies(
                e -> assertThat(e.getOvertimeSpecialRate()).as("check overtimeSpecialRate").isEqualTo(actual.getOvertimeSpecialRate())
            )
            .satisfies(
                e ->
                    assertThat(e.getLastUpdated())
                        .as("check lastUpdated")
                        .usingComparator(zonedDataTimeSameInstant)
                        .isEqualTo(actual.getLastUpdated())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSystemConfigUpdatableRelationshipsEquals(SystemConfig expected, SystemConfig actual) {}
}
